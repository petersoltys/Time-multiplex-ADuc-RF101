#line 1 "..\\..\\DasLib\\DioLib.c"























 
#line 1 "..\\..\\DasLib\\DioLib.h"



















 
#line 1 "..\\..\\Common\\ADuCRF101.h"
 








 





 



 
















 

typedef enum {
 
  Reset_IRQn                        = -15,   
  NonMaskableInt_IRQn               = -14,   
  HardFault_IRQn                    = -13,   
  MemoryManagement_IRQn             = -12,   
  BusFault_IRQn                     = -11,   
  UsageFault_IRQn                   = -10,   
  SVCall_IRQn                       = -5,    
  DebugMonitor_IRQn                 = -4,    
  PendSV_IRQn                       = -2,    
  SysTick_IRQn                      = -1,    

  WUT_IRQn                          = 0,     
  EINT0_IRQn                        = 1,     
  EINT1_IRQn                        = 2,     
  EINT2_IRQn                        = 3,     
  EINT3_IRQn                        = 4,     
  EINT4_IRQn                        = 5,     
  EINT5_IRQn                        = 6,     
  EINT6_IRQn                        = 7,     
  EINT7_IRQn                        = 8,     
  EINT8_IRQn                        = 9,     
  UHFTRX_IRQn                       = 9,     
  WDT_IRQn                          = 10,    
  TIMER0_IRQn                       = 12,    
  TIMER1_IRQn                       = 13,    
  ADC0_IRQn                         = 14,    
  FLASH_IRQn                        = 15,    
  UART_IRQn                         = 16,    
  SPI0_IRQn                         = 17,    
  SPI1_IRQn                         = 18,    
  I2CS_IRQn                         = 19,    
  I2CM_IRQn                         = 20,    
  DMA_ERR_IRQn                      = 23,    
  DMA_SPI1_TX_IRQn                  = 24,    
  DMA_SPI1_RX_IRQn                  = 25,    
  DMA_UART_TX_IRQn                  = 26,    
  DMA_UART_RX_IRQn                  = 27,    
  DMA_I2CS_TX_IRQn                  = 28,    
  DMA_I2CS_RX_IRQn                  = 29,    
  DMA_I2CM_TX_IRQn                  = 30,    
  DMA_I2CM_RX_IRQn                  = 31,    
  DMA_ADC0_IRQn                     = 35,    
  DMA_SPI0_TX_IRQn                  = 36,    
  DMA_SPI0_RX_IRQn                  = 37,    
  PWM_TRIP_IRQn                     = 38,    
  PWM_PAIR0_IRQn                    = 39,    
  PWM_PAIR1_IRQn                    = 40,    
  PWM_PAIR2_IRQn                    = 41,    
  PWM_PAIR3_IRQn                    = 42     
} IRQn_Type;




 

 
 
 

 





   

#line 1 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"
 







 

























 
























 




 


 

 













#line 110 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"


 







#line 145 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"

#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
 
 





 









     
#line 27 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
     











#line 46 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"





 

     

     
typedef   signed          char int8_t;
typedef   signed short     int int16_t;
typedef   signed           int int32_t;
typedef   signed       __int64 int64_t;

     
typedef unsigned          char uint8_t;
typedef unsigned short     int uint16_t;
typedef unsigned           int uint32_t;
typedef unsigned       __int64 uint64_t;

     

     
     
typedef   signed          char int_least8_t;
typedef   signed short     int int_least16_t;
typedef   signed           int int_least32_t;
typedef   signed       __int64 int_least64_t;

     
typedef unsigned          char uint_least8_t;
typedef unsigned short     int uint_least16_t;
typedef unsigned           int uint_least32_t;
typedef unsigned       __int64 uint_least64_t;

     

     
typedef   signed           int int_fast8_t;
typedef   signed           int int_fast16_t;
typedef   signed           int int_fast32_t;
typedef   signed       __int64 int_fast64_t;

     
typedef unsigned           int uint_fast8_t;
typedef unsigned           int uint_fast16_t;
typedef unsigned           int uint_fast32_t;
typedef unsigned       __int64 uint_fast64_t;

     




typedef   signed           int intptr_t;
typedef unsigned           int uintptr_t;


     
typedef   signed     long long intmax_t;
typedef unsigned     long long uintmax_t;




     

     





     





     





     

     





     





     





     

     





     





     





     

     






     






     






     

     


     


     


     

     
#line 216 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     



     






     
    
 



#line 241 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     







     










     











#line 305 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"






 
#line 147 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"
#line 1 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cmInstr.h"
 







 

























 






 



 


 









 







 







 






 








 







 







 









 









 

__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
{
  rev16 r0, r0
  bx lr
}








 

__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
{
  revsh r0, r0
  bx lr
}










 










 











 









 









 









 











 











 











 







 










 










 









 





#line 684 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cmInstr.h"

   

#line 148 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"
#line 1 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cmFunc.h"
 







 

























 






 



 


 





 
 






 
static __inline uint32_t __get_CONTROL(void)
{
  register uint32_t __regControl         __asm("control");
  return(__regControl);
}







 
static __inline void __set_CONTROL(uint32_t control)
{
  register uint32_t __regControl         __asm("control");
  __regControl = control;
}







 
static __inline uint32_t __get_IPSR(void)
{
  register uint32_t __regIPSR          __asm("ipsr");
  return(__regIPSR);
}







 
static __inline uint32_t __get_APSR(void)
{
  register uint32_t __regAPSR          __asm("apsr");
  return(__regAPSR);
}







 
static __inline uint32_t __get_xPSR(void)
{
  register uint32_t __regXPSR          __asm("xpsr");
  return(__regXPSR);
}







 
static __inline uint32_t __get_PSP(void)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  return(__regProcessStackPointer);
}







 
static __inline void __set_PSP(uint32_t topOfProcStack)
{
  register uint32_t __regProcessStackPointer  __asm("psp");
  __regProcessStackPointer = topOfProcStack;
}







 
static __inline uint32_t __get_MSP(void)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  return(__regMainStackPointer);
}







 
static __inline void __set_MSP(uint32_t topOfMainStack)
{
  register uint32_t __regMainStackPointer     __asm("msp");
  __regMainStackPointer = topOfMainStack;
}







 
static __inline uint32_t __get_PRIMASK(void)
{
  register uint32_t __regPriMask         __asm("primask");
  return(__regPriMask);
}







 
static __inline void __set_PRIMASK(uint32_t priMask)
{
  register uint32_t __regPriMask         __asm("primask");
  __regPriMask = (priMask);
}








 







 








 
static __inline uint32_t  __get_BASEPRI(void)
{
  register uint32_t __regBasePri         __asm("basepri");
  return(__regBasePri);
}







 
static __inline void __set_BASEPRI(uint32_t basePri)
{
  register uint32_t __regBasePri         __asm("basepri");
  __regBasePri = (basePri & 0xff);
}







 
static __inline uint32_t __get_FAULTMASK(void)
{
  register uint32_t __regFaultMask       __asm("faultmask");
  return(__regFaultMask);
}







 
static __inline void __set_FAULTMASK(uint32_t faultMask)
{
  register uint32_t __regFaultMask       __asm("faultmask");
  __regFaultMask = (faultMask & (uint32_t)1);
}




#line 307 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cmFunc.h"


#line 634 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cmFunc.h"

 

#line 149 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"








 
#line 179 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"

 






 
#line 195 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"

 












 


 





 


 
typedef union
{
  struct
  {

    uint32_t _reserved0:27;               





    uint32_t Q:1;                         
    uint32_t V:1;                         
    uint32_t C:1;                         
    uint32_t Z:1;                         
    uint32_t N:1;                         
  } b;                                    
  uint32_t w;                             
} APSR_Type;



 
typedef union
{
  struct
  {
    uint32_t ISR:9;                       
    uint32_t _reserved0:23;               
  } b;                                    
  uint32_t w;                             
} IPSR_Type;



 
typedef union
{
  struct
  {
    uint32_t ISR:9;                       

    uint32_t _reserved0:15;               





    uint32_t T:1;                         
    uint32_t IT:2;                        
    uint32_t Q:1;                         
    uint32_t V:1;                         
    uint32_t C:1;                         
    uint32_t Z:1;                         
    uint32_t N:1;                         
  } b;                                    
  uint32_t w;                             
} xPSR_Type;



 
typedef union
{
  struct
  {
    uint32_t nPRIV:1;                     
    uint32_t SPSEL:1;                     
    uint32_t FPCA:1;                      
    uint32_t _reserved0:29;               
  } b;                                    
  uint32_t w;                             
} CONTROL_Type;

 






 


 
typedef struct
{
  volatile uint32_t ISER[8];                  
       uint32_t RESERVED0[24];
  volatile uint32_t ICER[8];                  
       uint32_t RSERVED1[24];
  volatile uint32_t ISPR[8];                  
       uint32_t RESERVED2[24];
  volatile uint32_t ICPR[8];                  
       uint32_t RESERVED3[24];
  volatile uint32_t IABR[8];                  
       uint32_t RESERVED4[56];
  volatile uint8_t  IP[240];                  
       uint32_t RESERVED5[644];
  volatile  uint32_t STIR;                     
}  NVIC_Type;

 



 






 


 
typedef struct
{
  volatile const  uint32_t CPUID;                    
  volatile uint32_t ICSR;                     
  volatile uint32_t VTOR;                     
  volatile uint32_t AIRCR;                    
  volatile uint32_t SCR;                      
  volatile uint32_t CCR;                      
  volatile uint8_t  SHP[12];                  
  volatile uint32_t SHCSR;                    
  volatile uint32_t CFSR;                     
  volatile uint32_t HFSR;                     
  volatile uint32_t DFSR;                     
  volatile uint32_t MMFAR;                    
  volatile uint32_t BFAR;                     
  volatile uint32_t AFSR;                     
  volatile const  uint32_t PFR[2];                   
  volatile const  uint32_t DFR;                      
  volatile const  uint32_t ADR;                      
  volatile const  uint32_t MMFR[4];                  
  volatile const  uint32_t ISAR[5];                  
       uint32_t RESERVED0[5];
  volatile uint32_t CPACR;                    
} SCB_Type;

 















 






























 




#line 422 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"

 





















 









 


















 










































 









 









 















 






 


 
typedef struct
{
       uint32_t RESERVED0[1];
  volatile const  uint32_t ICTR;                     

  volatile uint32_t ACTLR;                    



} SCnSCB_Type;

 



 










 






 


 
typedef struct
{
  volatile uint32_t CTRL;                     
  volatile uint32_t LOAD;                     
  volatile uint32_t VAL;                      
  volatile const  uint32_t CALIB;                    
} SysTick_Type;

 












 



 



 









 






 


 
typedef struct
{
  volatile  union
  {
    volatile  uint8_t    u8;                   
    volatile  uint16_t   u16;                  
    volatile  uint32_t   u32;                  
  }  PORT [32];                           
       uint32_t RESERVED0[864];
  volatile uint32_t TER;                      
       uint32_t RESERVED1[15];
  volatile uint32_t TPR;                      
       uint32_t RESERVED2[15];
  volatile uint32_t TCR;                      
       uint32_t RESERVED3[29];
  volatile  uint32_t IWR;                      
  volatile const  uint32_t IRR;                      
  volatile uint32_t IMCR;                     
       uint32_t RESERVED4[43];
  volatile  uint32_t LAR;                      
  volatile const  uint32_t LSR;                      
       uint32_t RESERVED5[6];
  volatile const  uint32_t PID4;                     
  volatile const  uint32_t PID5;                     
  volatile const  uint32_t PID6;                     
  volatile const  uint32_t PID7;                     
  volatile const  uint32_t PID0;                     
  volatile const  uint32_t PID1;                     
  volatile const  uint32_t PID2;                     
  volatile const  uint32_t PID3;                     
  volatile const  uint32_t CID0;                     
  volatile const  uint32_t CID1;                     
  volatile const  uint32_t CID2;                     
  volatile const  uint32_t CID3;                     
} ITM_Type;

 



 



























 



 



 



 









   






 


 
typedef struct
{
  volatile uint32_t CTRL;                     
  volatile uint32_t CYCCNT;                   
  volatile uint32_t CPICNT;                   
  volatile uint32_t EXCCNT;                   
  volatile uint32_t SLEEPCNT;                 
  volatile uint32_t LSUCNT;                   
  volatile uint32_t FOLDCNT;                  
  volatile const  uint32_t PCSR;                     
  volatile uint32_t COMP0;                    
  volatile uint32_t MASK0;                    
  volatile uint32_t FUNCTION0;                
       uint32_t RESERVED0[1];
  volatile uint32_t COMP1;                    
  volatile uint32_t MASK1;                    
  volatile uint32_t FUNCTION1;                
       uint32_t RESERVED1[1];
  volatile uint32_t COMP2;                    
  volatile uint32_t MASK2;                    
  volatile uint32_t FUNCTION2;                
       uint32_t RESERVED2[1];
  volatile uint32_t COMP3;                    
  volatile uint32_t MASK3;                    
  volatile uint32_t FUNCTION3;                
} DWT_Type;

 






















































 



 



 



 



 



 



 



























   






 


 
typedef struct
{
  volatile uint32_t SSPSR;                    
  volatile uint32_t CSPSR;                    
       uint32_t RESERVED0[2];
  volatile uint32_t ACPR;                     
       uint32_t RESERVED1[55];
  volatile uint32_t SPPR;                     
       uint32_t RESERVED2[131];
  volatile const  uint32_t FFSR;                     
  volatile uint32_t FFCR;                     
  volatile const  uint32_t FSCR;                     
       uint32_t RESERVED3[759];
  volatile const  uint32_t TRIGGER;                  
  volatile const  uint32_t FIFO0;                    
  volatile const  uint32_t ITATBCTR2;                
       uint32_t RESERVED4[1];
  volatile const  uint32_t ITATBCTR0;                
  volatile const  uint32_t FIFO1;                    
  volatile uint32_t ITCTRL;                   
       uint32_t RESERVED5[39];
  volatile uint32_t CLAIMSET;                 
  volatile uint32_t CLAIMCLR;                 
       uint32_t RESERVED7[8];
  volatile const  uint32_t DEVID;                    
  volatile const  uint32_t DEVTYPE;                  
} TPI_Type;

 



 



 












 






 



 





















 



 





















 



 



 


















 






   


#line 1133 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"






 


 
typedef struct
{
  volatile uint32_t DHCSR;                    
  volatile  uint32_t DCRSR;                    
  volatile uint32_t DCRDR;                    
  volatile uint32_t DEMCR;                    
} CoreDebug_Type;

 




































 






 







































 






 

 
#line 1253 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"

#line 1262 "C:\\Keil_v5\\\\ARM\\CMSIS\\Include\\core_cm3.h"






 










 

 



 




 










 
static __inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);                

  reg_value  =  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;                                                    
  reg_value &= ~((0xFFFFUL << 16) | (7UL << 8));              
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << 16) |
                (PriorityGroupTmp << 8));                                      
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR =  reg_value;
}







 
static __inline uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8)) >> 8);    
}







 
static __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
}







 
static __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
}











 
static __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  return((uint32_t) ((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
}







 
static __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
}







 
static __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
}










 
static __inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
  return((uint32_t)((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
}










 
static __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - 3)) & 0xff); }  
  else {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[(uint32_t)(IRQn)] = ((priority << (8 - 3)) & 0xff);    }         
}












 
static __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{

  if(IRQn < 0) {
    return((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - 3)));  }  
  else {
    return((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[(uint32_t)(IRQn)]           >> (8 - 3)));  }  
}













 
static __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);           
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 3) ? 3 : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + 3) < 7) ? 0 : PriorityGroupTmp - 7 + 3;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}













 
static __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);           
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 3) ? 3 : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + 3) < 7) ? 0 : PriorityGroupTmp - 7 + 3;

  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
  *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
}





 
static __inline void NVIC_SystemReset(void)
{
  __dsb(0xF);                                                     
 
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FA << 16)      |
                 (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8)) |
                 (1UL << 2));                    
  __dsb(0xF);                                                      
  while(1);                                                     
}

 



 




 

















 
static __inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > (0xFFFFFFUL << 0))  return (1);       

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = ticks - 1;                                   
  NVIC_SetPriority (SysTick_IRQn, (1<<3) - 1);   
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0;                                           
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2) |
                   (1UL << 1)   |
                   (1UL << 0);                     
  return (0);                                                   
}



 



 




 

extern volatile int32_t ITM_RxBuffer;                     












 
static __inline uint32_t ITM_SendChar (uint32_t ch)
{
  if ((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL << 0))                  &&       
      (((ITM_Type *) (0xE0000000UL) )->TER & (1UL << 0)        )                    )      
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0].u32 == 0);
    ((ITM_Type *) (0xE0000000UL) )->PORT[0].u8 = (uint8_t) ch;
  }
  return (ch);
}








 
static __inline int32_t ITM_ReceiveChar (void) {
  int32_t ch = -1;                            

  if (ITM_RxBuffer != 0x5AA55AA5) {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = 0x5AA55AA5;        
  }

  return (ch);
}








 
static __inline int32_t ITM_CheckChar (void) {

  if (ITM_RxBuffer == 0x5AA55AA5) {
    return (0);                                  
  } else {
    return (1);                                  
  }
}

 





#line 110 "..\\..\\Common\\ADuCRF101.h"
#line 1 "..\\..\\Common\\system_ADUCRF101.h"






















 




 



   
















 
extern void SystemInit (void);









 
extern void SystemCoreClockUpdate (void);









 
extern void SetSystemExtClkFreq (uint32_t ExtClkFreq);








 
extern uint32_t GetSystemExtClkFreq (void);










 
  


   

#line 111 "..\\..\\Common\\ADuCRF101.h"


 
 
 




 


 

  #pragma push
  #pragma anon_unions
#line 138 "..\\..\\Common\\ADuCRF101.h"




 





 


 





 






 





 





 





 






 




 




 





 





 





 





 


 


 


 


 


 


 


 


 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 




 




 




 




 




 




 




 




 




 




 




 




 




 




 




 




 




 




 




 




 




 




 




 




 





 





 





 





 





 





 





 





 





 





 





 





 





 


 






 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 
#line 720 "..\\..\\Common\\ADuCRF101.h"

 





 





 





 





 
#line 752 "..\\..\\Common\\ADuCRF101.h"

 





 





 








 


typedef struct {                             
  volatile uint16_t  ADCCFG;                     
  volatile const  uint16_t  RESERVED0;
  volatile uint8_t   ADCCON;                     
  volatile const  uint8_t   RESERVED1[3];
  volatile uint8_t   ADCSTA;                     
  volatile const  uint8_t   RESERVED2[3];
  volatile uint16_t  ADCDAT;                     
  volatile const  uint16_t  RESERVED3;
  volatile uint16_t  ADCGN;                      
  volatile const  uint16_t  RESERVED4;
  volatile uint16_t  ADCOF;                      
} ADI_ADC_TypeDef;
#line 798 "..\\..\\Common\\ADuCRF101.h"

 


 






 
#line 817 "..\\..\\Common\\ADuCRF101.h"

 






 
#line 841 "..\\..\\Common\\ADuCRF101.h"

 


 






 






 






 






 
#line 880 "..\\..\\Common\\ADuCRF101.h"

 






 


 






 


 


 


 


 


 


 








 


typedef struct {                             
  volatile uint16_t  CLKCON;                     
  volatile const  uint16_t  RESERVED0[519];
  volatile uint8_t   XOSCCON;                    
  volatile const  uint8_t   RESERVED1[111];
  volatile uint16_t  CLKACT;                     
  volatile const  uint16_t  RESERVED2;
  volatile uint16_t  CLKPD;                      
} ADI_CLKCTL_TypeDef;
#line 943 "..\\..\\Common\\ADuCRF101.h"

 


 
#line 955 "..\\..\\Common\\ADuCRF101.h"

 






 
#line 973 "..\\..\\Common\\ADuCRF101.h"

 


 






 


 






 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 






 






 






 












 


typedef struct {                             
  volatile uint32_t  DMASTA;                     
  volatile uint32_t  DMACFG;                     
  volatile uint32_t  DMAPDBPTR;                  
  volatile uint32_t  DMAADBPTR;                  
  volatile const  uint32_t  RESERVED0;
  volatile uint32_t  DMASWREQ;                   
  volatile const  uint32_t  RESERVED1[2];
  volatile uint32_t  DMARMSKSET;                 
  volatile uint32_t  DMARMSKCLR;                 
  volatile uint32_t  DMAENSET;                   
  volatile uint32_t  DMAENCLR;                   
  volatile uint32_t  DMAALTSET;                  
  volatile uint32_t  DMAALTCLR;                  
  volatile uint32_t  DMAPRISET;                  
  volatile uint32_t  DMAPRICLR;                  
  volatile const  uint32_t  RESERVED2[3];
  volatile uint32_t  DMAERRCLR;                  
} ADI_DMA_TypeDef;
#line 1202 "..\\..\\Common\\ADuCRF101.h"

 


 



 
#line 1223 "..\\..\\Common\\ADuCRF101.h"

 






 


 






 


 


 


 


 


 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 






 






 






 


 












 


typedef struct {                             
  volatile uint16_t  FEESTA;                     
  volatile const  uint16_t  RESERVED0;
  volatile uint16_t  FEECON0;                    
  volatile const  uint16_t  RESERVED1;
  volatile uint16_t  FEECMD;                     
  volatile const  uint16_t  RESERVED2[3];
  volatile uint16_t  FEEADR0L;                   
  volatile const  uint16_t  RESERVED3;
  volatile uint16_t  FEEADR0H;                   
  volatile const  uint16_t  RESERVED4;
  volatile uint16_t  FEEADR1L;                   
  volatile const  uint16_t  RESERVED5;
  volatile uint16_t  FEEADR1H;                   
  volatile const  uint16_t  RESERVED6;
  volatile uint16_t  FEEKEY;                     
  volatile const  uint16_t  RESERVED7[3];
  volatile uint16_t  FEEPROL;                    
  volatile const  uint16_t  RESERVED8;
  volatile uint16_t  FEEPROH;                    
  volatile const  uint16_t  RESERVED9;
  volatile uint16_t  FEESIGL;                    
  volatile const  uint16_t  RESERVED10;
  volatile uint16_t  FEESIGH;                    
  volatile const  uint16_t  RESERVED11;
  volatile uint16_t  FEECON1;                    
  volatile const  uint16_t  RESERVED12[7];
  volatile uint16_t  FEEADRAL;                   
  volatile const  uint16_t  RESERVED13;
  volatile uint16_t  FEEADRAH;                   
  volatile const  uint16_t  RESERVED14[21];
  volatile uint16_t  FEEAEN0;                    
  volatile const  uint16_t  RESERVED15;
  volatile uint16_t  FEEAEN1;                    
  volatile const  uint16_t  RESERVED16;
  volatile uint16_t  FEEAEN2;                    
} ADI_FEE_TypeDef;
#line 2049 "..\\..\\Common\\ADuCRF101.h"

 


 






 






 






 






 






 






 


 






 






 






 


 
#line 2129 "..\\..\\Common\\ADuCRF101.h"

 


 


 


 


 


 


 


 


 


 




 


 


 


 


 


 


 


 


 


 






 


 


 


 


 


 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 












 


typedef struct {                             
  volatile uint16_t  GPCON;                      
  volatile const  uint16_t  RESERVED0;
  volatile uint8_t   GPOEN;                      
  volatile const  uint8_t   RESERVED1[3];
  volatile uint8_t   GPPUL;                      
  volatile const  uint8_t   RESERVED2[3];
  volatile uint8_t   GPOCE;                      
  volatile const  uint8_t   RESERVED3[7];
  volatile uint8_t   GPIN;                       
  volatile const  uint8_t   RESERVED4[3];
  volatile uint8_t   GPOUT;                      
  volatile const  uint8_t   RESERVED5[3];
  volatile uint8_t   GPSET;                      
  volatile const  uint8_t   RESERVED6[3];
  volatile uint8_t   GPCLR;                      
  volatile const  uint8_t   RESERVED7[3];
  volatile uint8_t   GPTGL;                      
} ADI_GPIO_TypeDef;
#line 2515 "..\\..\\Common\\ADuCRF101.h"

 


 





 






 





 





 






 





 




 




 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 
#line 3026 "..\\..\\Common\\ADuCRF101.h"

 


 





 





 





 




 




 






 






 


 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 


 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 


 





 





 





 





 





 





 
#line 3478 "..\\..\\Common\\ADuCRF101.h"

 


 



 



 




 




 




 




 




 




 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 
#line 3979 "..\\..\\Common\\ADuCRF101.h"

 


 



 



 




 



 





 





 



 




 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 
#line 4480 "..\\..\\Common\\ADuCRF101.h"

 


 




 




 




 




 




 





 




 




 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 











 


typedef struct {                             
  volatile uint8_t   GPDWN;                      
} ADI_GPIOCMN_TypeDef;




 


 












 


typedef struct {                             
  volatile const  uint32_t  RESERVED0;
  volatile uint16_t  RFTST;                      
  volatile const  uint16_t  RESERVED1[5];
  volatile uint8_t   SWACT;                      
} ADI_MISC_TypeDef;





 


 


 






 






 






 






 


 












 


typedef struct {                             
  volatile uint16_t  I2CMCON;                    
  volatile const  uint16_t  RESERVED0;
  volatile uint16_t  I2CMSTA;                    
  volatile const  uint16_t  RESERVED1;
  volatile uint16_t  I2CMRX;                     
  volatile const  uint16_t  RESERVED2;
  volatile uint16_t  I2CMTX;                     
  volatile const  uint16_t  RESERVED3;
  volatile uint16_t  I2CMRXCNT;                  
  volatile const  uint16_t  RESERVED4;
  volatile uint16_t  I2CMCRXCNT;                 
  volatile const  uint16_t  RESERVED5;
  volatile uint8_t   I2CADR0;                    
  volatile const  uint8_t   RESERVED6[3];
  volatile uint8_t   I2CADR1;                    
  volatile const  uint8_t   RESERVED7[7];
  volatile uint16_t  I2CDIV;                     
  volatile const  uint16_t  RESERVED8;
  volatile uint16_t  I2CSCON;                    
  volatile const  uint16_t  RESERVED9;
  volatile uint16_t  I2CSSTA;                    
  volatile const  uint16_t  RESERVED10;
  volatile uint16_t  I2CSRX;                     
  volatile const  uint16_t  RESERVED11;
  volatile uint16_t  I2CSTX;                     
  volatile const  uint16_t  RESERVED12;
  volatile uint16_t  I2CALT;                     
  volatile const  uint16_t  RESERVED13;
  volatile uint16_t  I2CID0;                     
  volatile const  uint16_t  RESERVED14;
  volatile uint16_t  I2CID1;                     
  volatile const  uint16_t  RESERVED15;
  volatile uint16_t  I2CID2;                     
  volatile const  uint16_t  RESERVED16;
  volatile uint16_t  I2CID3;                     
  volatile const  uint16_t  RESERVED17;
  volatile uint16_t  I2CFSTA;                    
} ADI_I2C_TypeDef;
#line 5132 "..\\..\\Common\\ADuCRF101.h"

 


 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 






 






 






 






 






 






 






 






 





 


 


 


 


 


 






 


 


 


 


 


 


 


 


 


 


 


 






 






 






 






 






 






 






 






 






 





 






 






 






 






 


 






 






 


 






 


 






 






 






 






 






 






 






 






 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 






 






 





 





 





 











 


typedef struct {                             
  volatile uint16_t  EI0CFG;                     
  volatile const  uint16_t  RESERVED0;
  volatile uint16_t  EI1CFG;                     
  volatile const  uint16_t  RESERVED1;
  volatile uint16_t  EI2CFG;                     
  volatile const  uint16_t  RESERVED2[3];
  volatile uint16_t  EICLR;                      
  volatile const  uint16_t  RESERVED3;
  volatile uint8_t   NMICLR;                     
} ADI_INTERRUPT_TypeDef;
#line 5647 "..\\..\\Common\\ADuCRF101.h"

 


 






 
#line 5665 "..\\..\\Common\\ADuCRF101.h"

 






 
#line 5680 "..\\..\\Common\\ADuCRF101.h"

 






 
#line 5695 "..\\..\\Common\\ADuCRF101.h"

 






 
#line 5710 "..\\..\\Common\\ADuCRF101.h"

 


 






 
#line 5728 "..\\..\\Common\\ADuCRF101.h"

 






 
#line 5743 "..\\..\\Common\\ADuCRF101.h"

 






 
#line 5758 "..\\..\\Common\\ADuCRF101.h"

 






 
#line 5773 "..\\..\\Common\\ADuCRF101.h"

 


 






 
#line 5791 "..\\..\\Common\\ADuCRF101.h"

 


 





 





 





 





 





 





 





 





 





 


 











 

#line 5910 "..\\..\\Common\\ADuCRF101.h"

 


 


 


 





 





 





 





 


 


 


 


 


 





 





 


 


 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 





 





 





 





 





 





 





 


 





 


 


 





 


 


 


 





 


 





 





 





 


 





 





 





 


 





 





 





 





 





 





 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 





 





 





 





 





 





 





 





 





 





 





 





 





 





 


 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 





 


 





 





 





 


 


 


 


 


 








 


typedef struct {                             
  volatile uint16_t  PWRMOD;                     
  volatile const  uint16_t  RESERVED0;
  volatile uint16_t  PWRKEY;                     
  volatile const  uint16_t  RESERVED1;
  volatile uint8_t   PSMCON;                     
  volatile const  uint8_t   RESERVED2[111];
  volatile uint8_t   SRAMRET;                    
  volatile const  uint8_t   RESERVED3[3];
  volatile uint8_t   SHUTDOWN;                   
} ADI_PWRCTL_TypeDef;
#line 7738 "..\\..\\Common\\ADuCRF101.h"

 


 






 





 


 




 


 






 


 






 


 






 






 












 


typedef struct {                             
  volatile uint16_t  PWMCON0;                    
  volatile const  uint16_t  RESERVED0;
  volatile uint8_t   PWMCON1;                    
  volatile const  uint8_t   RESERVED1[3];
  volatile uint16_t  PWMCLRI;                    
  volatile const  uint16_t  RESERVED2[3];
  volatile uint16_t  PWM0COM0;                   
  volatile const  uint16_t  RESERVED3;
  volatile uint16_t  PWM0COM1;                   
  volatile const  uint16_t  RESERVED4;
  volatile uint16_t  PWM0COM2;                   
  volatile const  uint16_t  RESERVED5;
  volatile uint16_t  PWM0LEN;                    
  volatile const  uint16_t  RESERVED6;
  volatile uint16_t  PWM1COM0;                   
  volatile const  uint16_t  RESERVED7;
  volatile uint16_t  PWM1COM1;                   
  volatile const  uint16_t  RESERVED8;
  volatile uint16_t  PWM1COM2;                   
  volatile const  uint16_t  RESERVED9;
  volatile uint16_t  PWM1LEN;                    
  volatile const  uint16_t  RESERVED10;
  volatile uint16_t  PWM2COM0;                   
  volatile const  uint16_t  RESERVED11;
  volatile uint16_t  PWM2COM1;                   
  volatile const  uint16_t  RESERVED12;
  volatile uint16_t  PWM2COM2;                   
  volatile const  uint16_t  RESERVED13;
  volatile uint16_t  PWM2LEN;                    
  volatile const  uint16_t  RESERVED14;
  volatile uint16_t  PWM3COM0;                   
  volatile const  uint16_t  RESERVED15;
  volatile uint16_t  PWM3COM1;                   
  volatile const  uint16_t  RESERVED16;
  volatile uint16_t  PWM3COM2;                   
  volatile const  uint16_t  RESERVED17;
  volatile uint16_t  PWM3LEN;                    
} ADI_PWM_TypeDef;
#line 7876 "..\\..\\Common\\ADuCRF101.h"

 


 






 






 






 






 






 






 






 
#line 7939 "..\\..\\Common\\ADuCRF101.h"

 






 






 






 






 






 






 


 






 


 





 





 





 





 





 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 








 


typedef struct {                             
  
  union {
    volatile uint8_t   RSTSTA;                   
    volatile uint8_t   RSTCLR;                   
  } ;
} ADI_RESET_TypeDef;





 


 






 






 






 






 






 


 






 






 






 






 












 


typedef struct {                             
  volatile uint16_t  SPISTA;                     
  volatile const  uint16_t  RESERVED0;
  volatile uint8_t   SPIRX;                      
  volatile const  uint8_t   RESERVED1[3];
  volatile uint8_t   SPITX;                      
  volatile const  uint8_t   RESERVED2[3];
  volatile uint16_t  SPIDIV;                     
  volatile const  uint16_t  RESERVED3;
  volatile uint16_t  SPICON;                     
  volatile const  uint16_t  RESERVED4;
  volatile uint16_t  SPIDMA;                     
  volatile const  uint16_t  RESERVED5;
  volatile uint16_t  SPICNT;                     
} ADI_SPI_TypeDef;
#line 8251 "..\\..\\Common\\ADuCRF101.h"

 


 






 






 
#line 8276 "..\\..\\Common\\ADuCRF101.h"

 






 






 






 






 
#line 8312 "..\\..\\Common\\ADuCRF101.h"

 






 


 


 


 


 


 






 


 


 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 


 
#line 8492 "..\\..\\Common\\ADuCRF101.h"

 


 






 






 
#line 8517 "..\\..\\Common\\ADuCRF101.h"

 






 






 






 






 
#line 8553 "..\\..\\Common\\ADuCRF101.h"

 






 


 


 


 


 


 






 


 


 






 






 






 






 






 






 






 






 






 






 






 






 






 






 






 


 






 






 






 


 








 


typedef struct {                             
  volatile uint16_t  LD;                         
  volatile const  uint16_t  RESERVED0;
  volatile uint16_t  VAL;                        
  volatile const  uint16_t  RESERVED1;
  volatile uint16_t  CON;                        
  volatile const  uint16_t  RESERVED2;
  volatile uint16_t  CLRI;                       
  volatile const  uint16_t  RESERVED3;
  volatile uint16_t  CAP;                        
  volatile const  uint16_t  RESERVED4[5];
  volatile uint16_t  STA;                        
} ADI_TIMER_TypeDef;
#line 8754 "..\\..\\Common\\ADuCRF101.h"

 


 


 


 


 


 






 
#line 8794 "..\\..\\Common\\ADuCRF101.h"

 






 






 






 






 






 






 


 





 





 


 


 


 






 






 






 
#line 8897 "..\\..\\Common\\ADuCRF101.h"

 


 


 


 


 


 






 
#line 8937 "..\\..\\Common\\ADuCRF101.h"

 






 






 






 






 






 






 


 





 





 


 


 


 






 






 






 












 


typedef struct {                             
  
  union {
    volatile uint8_t   COMTX;                    
    volatile uint8_t   COMRX;                    
  } ;
  volatile const  uint8_t   RESERVED0[3];
  volatile uint8_t   COMIEN;                     
  volatile const  uint8_t   RESERVED1[3];
  volatile uint8_t   COMIIR;                     
  volatile const  uint8_t   RESERVED2[3];
  volatile uint8_t   COMLCR;                     
  volatile const  uint8_t   RESERVED3[3];
  volatile uint8_t   COMMCR;                     
  volatile const  uint8_t   RESERVED4[3];
  volatile uint8_t   COMLSR;                     
  volatile const  uint8_t   RESERVED5[3];
  volatile uint8_t   COMMSR;                     
  volatile const  uint8_t   RESERVED6[11];
  volatile uint16_t  COMFBR;                     
  volatile const  uint16_t  RESERVED7;
  volatile uint16_t  COMDIV;                     
} ADI_UART_TypeDef;
#line 9076 "..\\..\\Common\\ADuCRF101.h"

 


 


 


 


 


 






 






 






 






 






 






 


 






 






 


 






 






 






 






 






 






 


 






 






 


 






 






 






 






 






 






 






 


 






 






 


 






 


 


 


 








 


typedef struct {                             
  volatile uint16_t  T2VAL0;                     
  volatile const  uint16_t  RESERVED0;
  volatile uint16_t  T2VAL1;                     
  volatile const  uint16_t  RESERVED1;
  volatile uint16_t  T2CON;                      
  volatile const  uint16_t  RESERVED2;
  volatile uint16_t  T2INC;                      
  volatile const  uint16_t  RESERVED3;
  volatile uint16_t  T2WUFB0;                    
  volatile const  uint16_t  RESERVED4;
  volatile uint16_t  T2WUFB1;                    
  volatile const  uint16_t  RESERVED5;
  volatile uint16_t  T2WUFC0;                    
  volatile const  uint16_t  RESERVED6;
  volatile uint16_t  T2WUFC1;                    
  volatile const  uint16_t  RESERVED7;
  volatile uint16_t  T2WUFD0;                    
  volatile const  uint16_t  RESERVED8;
  volatile uint16_t  T2WUFD1;                    
  volatile const  uint16_t  RESERVED9;
  volatile uint16_t  T2IEN;                      
  volatile const  uint16_t  RESERVED10;
  volatile uint16_t  T2STA;                      
  volatile const  uint16_t  RESERVED11;
  volatile uint16_t  T2CLRI;                     
  volatile const  uint16_t  RESERVED12[5];
  volatile uint16_t  T2WUFA0;                    
  volatile const  uint16_t  RESERVED13;
  volatile uint16_t  T2WUFA1;                    
} ADI_WUT_TypeDef;
#line 9361 "..\\..\\Common\\ADuCRF101.h"

 


 


 


 


 


 






 






 






 






 






 






 






 


 


 


 


 


 


 


 


 


 


 


 


 


 


 


 






 






 






 






 






 


 






 






 






 






 






 






 






 


 





 





 





 





 





 


 


 


 








 


typedef struct {                             
  volatile uint16_t  T3LD;                       
  volatile const  uint16_t  RESERVED0;
  volatile uint16_t  T3VAL;                      
  volatile const  uint16_t  RESERVED1;
  volatile uint16_t  T3CON;                      
  volatile const  uint16_t  RESERVED2;
  volatile uint16_t  T3CLRI;                     
  volatile const  uint16_t  RESERVED3[5];
  volatile uint16_t  T3STA;                      
} ADI_WDT_TypeDef;
#line 9630 "..\\..\\Common\\ADuCRF101.h"

 


 


 


 


 


 






 






 






 






 






 


 


 


 






 






 






 






 







 

  #pragma pop
#line 9740 "..\\..\\Common\\ADuCRF101.h"


 


#line 9754 "..\\..\\Common\\ADuCRF101.h"













#line 9775 "..\\..\\Common\\ADuCRF101.h"


 
 
 

#line 9806 "..\\..\\Common\\ADuCRF101.h"


 
 
 

#line 9835 "..\\..\\Common\\ADuCRF101.h"

      
   








#line 22 "..\\..\\DasLib\\DioLib.h"

#line 31 "..\\..\\DasLib\\DioLib.h"


extern int DioCfg(ADI_GPIO_TypeDef *pPort, int iMpx);
extern int DioDrv(ADI_GPIO_TypeDef *pPort, int iOen, int iPul, int iOce);
extern int DioOen(ADI_GPIO_TypeDef *pPort, int iOen);
extern int DioPul(ADI_GPIO_TypeDef *pPort, int iPul);
extern int DioOce(ADI_GPIO_TypeDef *pPort, int iOce);
extern int DioTriState(ADI_GPIO_TypeDef *pPort); 


extern int DioCfgPin(ADI_GPIO_TypeDef *pPort, int iPin, int iMode);  
extern int DioOenPin(ADI_GPIO_TypeDef *pPort, int iPin, int iOen);   
extern int DioPulPin(ADI_GPIO_TypeDef *pPort, int iPin, int iPul);   
extern int DioOcePin(ADI_GPIO_TypeDef *pPort, int iPin, int iOce);   
extern int DioTriStatePin(ADI_GPIO_TypeDef *pPort, int iPin);        

extern int DioRd(ADI_GPIO_TypeDef *pPort);
extern int DioWr(ADI_GPIO_TypeDef *pPort, int iVal);
extern int DioSet(ADI_GPIO_TypeDef *pPort, int iVal);
extern int DioClr(ADI_GPIO_TypeDef *pPort, int iVal);
extern int DioTgl(ADI_GPIO_TypeDef *pPort, int iVal);




#line 26 "..\\..\\DasLib\\DioLib.c"
#line 27 "..\\..\\DasLib\\DioLib.c"














 

int DioCfg(ADI_GPIO_TypeDef *pPort, int iMpx)
	{  
        pPort->GPCON = iMpx;
	return 1;
	}

















 
int DioDrv(ADI_GPIO_TypeDef *pPort, int iOen, int iPul, int iOce)
	{
	pPort->GPOEN = iOen;
	pPort->GPPUL = iPul;
	pPort->GPOCE = iOce;
	return 1;
	}















 
int DioOen(ADI_GPIO_TypeDef *pPort, int iOen)
	{
	pPort->GPOEN = iOen;
	return 1;
	}















 
int DioPul(ADI_GPIO_TypeDef *pPort, int iPul)
	{
	pPort->GPPUL = iPul;
	return 1;
	}

















 
int DioOce(ADI_GPIO_TypeDef *pPort, int iOce)
	{
	pPort->GPOCE = iOce;
	return 1;
	}
	










 
int DioTriState(ADI_GPIO_TypeDef *pPort)
{
  pPort->GPOCE = 0xFF;	
  pPort->GPOEN = 0xFF;
  pPort->GPOUT = 0xFF;
  return 1;	
}





















 

int DioCfgPin(ADI_GPIO_TypeDef *pPort, int iPin, int iMode)
{  
  unsigned short a = pPort->GPCON;
  a &= (0xFFFF - (0x3 << (2 * iPin)));  
  a += (iMode << 2 * iPin);             
  pPort->GPCON = a;
  return 1;
}
























 
int DioOenPin(ADI_GPIO_TypeDef *pPort, int iPin, int iOen)
{
  unsigned short a = pPort->GPOEN;
  a &= (0xFF - (0x1 << iPin));   
  a += (iOen << iPin);            
  pPort->GPOEN = a;
  return 1;		
}
























 
int DioPulPin(ADI_GPIO_TypeDef *pPort, int iPin, int iPul)
{
  unsigned short a = pPort->GPPUL;
  a &= (0xFF - (0x1 << iPin));   
  a += (iPul << iPin);            
  pPort->GPPUL = a;
  return 1;		
}


























 
int DioOcePin(ADI_GPIO_TypeDef *pPort, int iPin, int iOce)
{
  unsigned short a = pPort->GPOCE;
  a &= (0xFF - (0x1 << iPin));   
  a += (iOce << iPin);            
  pPort->GPOCE = a;
  return 1;		

}
























 
int DioTriStatePin(ADI_GPIO_TypeDef *pPort, int iPin)
{
  unsigned short a = (1 << iPin);
  pPort->GPOCE |= a;	
  pPort->GPOEN |= a;
  pPort->GPOUT |= a;
  return 1;
}











 
int DioRd(ADI_GPIO_TypeDef *pPort)
	{
    return (pPort->GPIN);
	}














 
int DioWr(ADI_GPIO_TypeDef *pPort, int iVal)
	{     
        pPort->GPOUT = iVal;
	return (pPort->GPOUT);
	}














 
int DioSet(ADI_GPIO_TypeDef *pPort, int iVal)
	{
        pPort->GPSET = iVal;
	return (pPort->GPSET);
	}














 
int DioClr(ADI_GPIO_TypeDef *pPort, int iVal)
	{
        pPort->GPCLR = iVal;
	return (pPort->GPCLR);
	}














 
int DioTgl(ADI_GPIO_TypeDef *pPort, int iVal)
	{
        pPort->GPTGL = iVal;
	return (pPort->GPTGL);
	}


 

