<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\Radio.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\Radio.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 69]: Last Updated: Wed Sep 16 23:54:43 2015
<BR><P>
<H3>Maximum Stack Usage =        472 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; RadioRecieve &rArr; getMissPkt &rArr; rf_printf &rArr; radioSend &rArr; RadioTxPacketVariableLen &rArr; RadioCommitRadioConfig &rArr; RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">DMA_UART_TX_Int_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">DMA_UART_TX_Int_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[18]">ADC0_Int_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ADC0_Int_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC0_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[28]">DMA_ADC_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[1f]">DMA_Err_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[27]">DMA_I2C0_MRX_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[26]">DMA_I2C0_MTX_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[25]">DMA_I2C0_SRX_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[24]">DMA_I2C0_STX_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[2a]">DMA_SPI0_RX_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[29]">DMA_SPI0_TX_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[21]">DMA_SPI1_RX_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[20]">DMA_SPI1_TX_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[23]">DMA_UART_RX_Int_Handler</a> from master.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[22]">DMA_UART_TX_Int_Handler</a> from master.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[b]">Ext_Int0_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[c]">Ext_Int1_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[d]">Ext_Int2_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[e]">Ext_Int3_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[f]">Ext_Int4_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[10]">Ext_Int5_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[11]">Ext_Int6_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[12]">Ext_Int7_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[13]">Ext_Int8_Handler</a> from radioeng.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[19]">Flsh_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[16]">GP_Tmr0_Int_Handler</a> from master.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[17]">GP_Tmr1_Int_Handler</a> from master.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[1e]">I2C0_Master_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[1d]">I2C0_Slave_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[2c]">PWM0_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[2d]">PWM1_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[2e]">PWM2_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[2f]">PWM3_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[2b]">PWMTrip_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[1b]">SPI0_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[1c]">SPI1_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_aducrf101.o(.text) referenced from startup_aducrf101.o(.text)
 <LI><a href="#[1a]">UART_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[15]">UnUsed_Handler</a> from startup_aducrf101.o(.text) referenced 7 times from startup_aducrf101.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[14]">WDog_Tmr_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[a]">WakeUp_Int_Handler</a> from startup_aducrf101.o(.text) referenced from startup_aducrf101.o(RESET)
 <LI><a href="#[32]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_aducrf101.o(.text)
 <LI><a href="#[33]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[34]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[30]">main</a> from master.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[35]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[94]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[37]"></a>uartInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uartInit &rArr; DmaTransferSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtLinCfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaTransferSetup
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaInit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioCfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>ledInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ledInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioOen
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>blink</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GptSta
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GptLd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GptClrInt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GptCfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[a4]"></a>blinkDisable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, master.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>radioInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = radioInit &rArr; RadioSetFrequency &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxSetPA
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetFrequency
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioPayldDataWhitening
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>dmaSend</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = dmaSend &rArr; DmaTransferSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtDma
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaTransferSetup
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaChanSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_TX_Int_Handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_printf
</UL>

<P><STRONG><a name="[4c]"></a>dma_printf</STRONG> (Thumb, 44 bytes, Stack size 288 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = dma_printf &rArr; dmaSend &rArr; DmaTransferSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_TX_Int_Handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissPkt
</UL>

<P><STRONG><a name="[4e]"></a>radioSend</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = radioSend &rArr; RadioTxPacketVariableLen &rArr; RadioCommitRadioConfig &rArr; RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPacketVariableLen
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPacketComplete
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketVariableLen
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_printf
</UL>

<P><STRONG><a name="[52]"></a>rf_printf</STRONG> (Thumb, 56 bytes, Stack size 288 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rf_printf &rArr; radioSend &rArr; RadioTxPacketVariableLen &rArr; RadioCommitRadioConfig &rArr; RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioSend
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRecieve
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissPkt
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conectionEstablish
</UL>

<P><STRONG><a name="[53]"></a>timeMultiplexInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timeMultiplexInit &rArr; GptCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GptSta
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GptLd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GptClrInt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GptCfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conectionEstablish
</UL>

<P><STRONG><a name="[54]"></a>conectionEstablish</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = conectionEstablish &rArr; rf_printf &rArr; radioSend &rArr; RadioTxPacketVariableLen &rArr; RadioCommitRadioConfig &rArr; RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeMultiplexInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>getMissPkt</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = getMissPkt &rArr; rf_printf &rArr; radioSend &rArr; RadioTxPacketVariableLen &rArr; RadioCommitRadioConfig &rArr; RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTerminateRadioOp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketVariableLen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketRead
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketAvailable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioClr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_printf
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_printf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRecieve
</UL>

<P><STRONG><a name="[22]"></a>DMA_UART_TX_Int_Handler</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + In Cycle
<LI>Call Chain = DMA_UART_TX_Int_Handler &rArr;  DMA_UART_TX_Int_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtDma
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaChanSetup
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_TX_Int_Handler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_printf
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendBufferedPackets
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_TX_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>sendBufferedPackets</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = sendBufferedPackets &rArr; DMA_UART_TX_Int_Handler &rArr;  DMA_UART_TX_Int_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_TX_Int_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRecieve
</UL>

<P><STRONG><a name="[5e]"></a>RadioRecieve</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = RadioRecieve &rArr; getMissPkt &rArr; rf_printf &rArr; radioSend &rArr; RadioTxPacketVariableLen &rArr; RadioCommitRadioConfig &rArr; RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketVariableLen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketRead
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketAvailable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioSet
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioClr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendBufferedPackets
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissPkt
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = main &rArr; RadioRecieve &rArr; getMissPkt &rArr; rf_printf &rArr; radioSend &rArr; RadioTxPacketVariableLen &rArr; RadioCommitRadioConfig &rArr; RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtGo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRecieve
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conectionEstablish
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[17]"></a>GP_Tmr1_Int_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GP_Tmr1_Int_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GptSta
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioTgl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GP_Tmr0_Int_Handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GP_Tmr0_Int_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GptSta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_UART_RX_Int_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_UART_RX_Int_Handler &rArr; UrtDma
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtDma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADC0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Int_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_ADC_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_Err_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_I2C0_MRX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA_I2C0_MTX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA_I2C0_SRX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_I2C0_STX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_SPI0_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_SPI0_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA_SPI1_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA_SPI1_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Ext_Int0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Ext_Int1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Ext_Int2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Ext_Int3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Ext_Int4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Ext_Int5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Ext_Int6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>Ext_Int7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Flsh_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C0_Master_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C0_Slave_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PWM2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PWM3_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWMTrip_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UnUsed_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WDog_Tmr_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WakeUp_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducrf101.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>RadioGetAPIVersion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radioeng.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>RadioSwitchConfig</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, radioeng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioConfiguration
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOffMode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>

<P><STRONG><a name="[75]"></a>RadioPowerOff</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RadioPowerOff &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandNoWait
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[45]"></a>RadioInit</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RadioInit &rArr; RadioCommitRadioConfig &rArr; RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioPowerOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWaitForPowerUp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSyncComms
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioConfiguration
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOffMode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
</UL>

<P><STRONG><a name="[77]"></a>RadioDeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, radioeng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandNoWait
</UL>

<P><STRONG><a name="[59]"></a>RadioTerminateRadioOp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RadioTerminateRadioOp &rArr; RadioToOnMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissPkt
</UL>

<P><STRONG><a name="[46]"></a>RadioSetFrequency</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RadioSetFrequency &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
</UL>

<P><STRONG><a name="[a6]"></a>RadioSetModulationType</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, radioeng.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>RadioPayldManchesterEncode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, radioeng.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>RadioPayldDataWhitening</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioPayldDataWhitening
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
</UL>

<P><STRONG><a name="[7b]"></a>RadioTxPacketFixedLen</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, radioeng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>

<P><STRONG><a name="[50]"></a>RadioTxPacketVariableLen</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RadioTxPacketVariableLen &rArr; RadioCommitRadioConfig &rArr; RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioSend
</UL>

<P><STRONG><a name="[4f]"></a>RadioTxPacketComplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radioeng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioSend
</UL>

<P><STRONG><a name="[47]"></a>RadioTxSetPA</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RadioTxSetPA
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
</UL>

<P><STRONG><a name="[7c]"></a>RadioTxCarrier</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, radioeng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>

<P><STRONG><a name="[7d]"></a>RadioTxPreamble</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, radioeng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>

<P><STRONG><a name="[7e]"></a>RadioRxPacketFixedLen</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, radioeng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>

<P><STRONG><a name="[51]"></a>RadioRxPacketVariableLen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RadioRxPacketVariableLen &rArr; RadioCommitRadioConfig &rArr; RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRecieve
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissPkt
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioSend
</UL>

<P><STRONG><a name="[5a]"></a>RadioRxPacketAvailable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radioeng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketRead
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRecieve
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissPkt
</UL>

<P><STRONG><a name="[5b]"></a>RadioRxPacketRead</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RadioRxPacketRead &rArr; RadioMMapRead
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapRead
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRecieve
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissPkt
</UL>

<P><STRONG><a name="[80]"></a>RadioRxBERTestMode</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, radioeng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
</UL>

<P><STRONG><a name="[13]"></a>Ext_Int8_Handler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ext_Int8_Handler &rArr; RadioMMapRead
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapRead
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>RadioRadioGetRSSI</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, radioeng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSyncComms
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>

<P><STRONG><a name="[82]"></a>RadioTxSetPower</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, radioeng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
</UL>

<P><STRONG><a name="[83]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, system_aducrf101.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSetClockDivider
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, system_aducrf101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducrf101.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>SetSystemExtClkFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_aducrf101.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>GetSystemExtClkFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_aducrf101.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>SystemSetClockDivider</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, system_aducrf101.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[aa]"></a>SystemGetClockFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_aducrf101.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>DioCfg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diolib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[ab]"></a>DioDrv</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, diolib.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>DioOen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diolib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
</UL>

<P><STRONG><a name="[ac]"></a>DioPul</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diolib.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>DioOce</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diolib.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>DioTriState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, diolib.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>DioCfgPin</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, diolib.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>DioOenPin</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diolib.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>DioPulPin</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diolib.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>DioOcePin</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diolib.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>DioTriStatePin</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, diolib.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>DioRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diolib.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>DioWr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diolib.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>DioSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diolib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRecieve
</UL>

<P><STRONG><a name="[57]"></a>DioClr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, diolib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRecieve
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissPkt
</UL>

<P><STRONG><a name="[62]"></a>DioTgl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, diolib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP_Tmr1_Int_Handler
</UL>

<P><STRONG><a name="[41]"></a>GptCfg</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gptlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GptCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeMultiplexInit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink
</UL>

<P><STRONG><a name="[40]"></a>GptLd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gptlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeMultiplexInit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink
</UL>

<P><STRONG><a name="[b6]"></a>GptVal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptlib.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>GptCapRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptlib.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>GptCapSrc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gptlib.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>GptSta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gptlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP_Tmr0_Int_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GP_Tmr1_Int_Handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeMultiplexInit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink
</UL>

<P><STRONG><a name="[43]"></a>GptClrInt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gptlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeMultiplexInit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink
</UL>

<P><STRONG><a name="[b9]"></a>GptBsy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gptlib.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>UrtLinCfg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, urtlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UrtLinCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[ba]"></a>UrtLinSta</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, urtlib.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>UrtTx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, urtlib.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>UrtRx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, urtlib.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>UrtIntCfg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, urtlib.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>UrtIntSta</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, urtlib.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>UrtModCfg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, urtlib.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>UrtModSta</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, urtlib.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>UrtDma</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, urtlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UrtDma
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_RX_Int_Handler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_TX_Int_Handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend
</UL>

<P><STRONG><a name="[c1]"></a>UrtBrk</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, urtlib.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>WdtCfg</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, wdtlib.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>WdtGo</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wdtlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>WdtLd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wdtlib.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>WdtVal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdtlib.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>WdtSta</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdtlib.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>WdtClrInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wdtlib.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>DmaInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dmalib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmaInit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[4a]"></a>DmaChanSetup</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dmalib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmaChanSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_UART_TX_Int_Handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend
</UL>

<P><STRONG><a name="[3b]"></a>DmaTransferSetup</STRONG> (Thumb, 306 bytes, Stack size 36 bytes, dmalib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DmaTransferSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioConfiguration
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaInit
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[58]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissPkt
</UL>

<P><STRONG><a name="[5c]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissPkt
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetFrequency
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetFrequency
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetFrequency
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[cd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[89]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[36]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[cf]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[d0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d2]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[56]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissPkt
</UL>

<P><STRONG><a name="[97]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d3]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[d4]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[4d]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_printf
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_printf
</UL>

<P><STRONG><a name="[d5]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[d6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[61]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, master.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeMultiplexInit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blink
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[65]"></a>RadioSPIXferByte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, radioeng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapRead
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWaitOnCmdLdr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandBytes
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadState
</UL>

<P><STRONG><a name="[63]"></a>RadioReadState</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RadioReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSPIXferByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOffMode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWaitOnState
</UL>

<P><STRONG><a name="[67]"></a>RadioWaitOnState</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RadioWaitOnState &rArr; RadioReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOffMode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>

<P><STRONG><a name="[68]"></a>RadioSendCommandBytes</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSPIXferByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandNoWait
</UL>

<P><STRONG><a name="[69]"></a>RadioSendCommandNoWait</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDeInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioPowerOff
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOffMode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>

<P><STRONG><a name="[6a]"></a>RadioToOnMode</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RadioToOnMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandNoWait
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWaitOnState
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRadioGetRSSI
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketFixedLen
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPreamble
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCarrier
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPacketFixedLen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSwitchConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioConfigure
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPacketVariableLen
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTerminateRadioOp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketVariableLen
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[6b]"></a>RadioWaitOnCmdLdr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RadioWaitOnCmdLdr
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSPIXferByte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSyncComms
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
</UL>

<P><STRONG><a name="[6c]"></a>RadioSendCommandWait</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RadioSendCommandWait &rArr; RadioWaitOnCmdLdr
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWaitOnCmdLdr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRadioGetRSSI
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBERTestMode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketFixedLen
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPreamble
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCarrier
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPacketFixedLen
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSyncComms
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioConfigure
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPacketVariableLen
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketVariableLen
</UL>

<P><STRONG><a name="[6d]"></a>RadioMMapWrite</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RadioMMapWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSPIXferByte
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxSetPower
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Int8_Handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBERTestMode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPreamble
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCarrier
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPacketFixedLen
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioConfigure
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPacketVariableLen
</UL>

<P><STRONG><a name="[6e]"></a>RadioToOffMode</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandNoWait
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWaitOnState
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSwitchConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioConfigure
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[6f]"></a>RadioConfigure</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOffMode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioToOnMode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioCommitRadioConfig
</UL>

<P><STRONG><a name="[70]"></a>RadioCommitRadioConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RadioCommitRadioConfig &rArr; RadioConfigure &rArr; RadioToOffMode &rArr; RadioSendCommandNoWait &rArr; RadioSendCommandBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioConfigure
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRadioGetRSSI
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBERTestMode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketFixedLen
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPreamble
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCarrier
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPacketFixedLen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSwitchConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPacketVariableLen
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketVariableLen
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[71]"></a>SetRadioConfiguration</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetRadioConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSwitchConfig
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[74]"></a>RadioSyncComms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RadioSyncComms &rArr; RadioSendCommandWait &rArr; RadioWaitOnCmdLdr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandWait
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWaitOnCmdLdr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRadioGetRSSI
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[76]"></a>RadioWaitForPowerUp</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, radioeng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[7f]"></a>RadioMMapRead</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, radioeng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RadioMMapRead
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSPIXferByte
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRadioGetRSSI
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Int8_Handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxPacketRead
</UL>

<P><STRONG><a name="[66]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, radioeng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapRead
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWaitOnCmdLdr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandBytes
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadState
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[64]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, radioeng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioDeInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapRead
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioMMapWrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWaitOnCmdLdr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSendCommandBytes
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadState
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[96]"></a>_printf_core</STRONG> (Thumb, 334 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[33]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL>
<P><STRONG><a name="[99]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[98]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[9d]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9c]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[34]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
